import oracledb from 'oracledb';
const { autoCommit } = oracledb;

const createCurriculoTable = async () => {
  let connection;
  try {
    connection = await oracledb.getConnection();
    
    const tableExists = await connection.execute(
      `SELECT table_name FROM user_tables WHERE table_name = 'CURRICULO'`
    );

    if (tableExists.rows.length === 0) {
      await connection.execute(`
        CREATE TABLE CURRICULO (
          CURRICULO_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          CANDIDATO_FK VARCHAR2(14) NOT NULL,
          CIDADE VARCHAR2(100) NOT NULL,
          ESTADO VARCHAR2(100) NOT NULL,
          AREA VARCHAR2(100) NOT NULL,
          IDIOMA VARCHAR2(50),
          CONSTRAINT FK_CANDIDATO FOREIGN KEY (CANDIDATO_FK) REFERENCES CANDIDATO(CPF)
        )
      `);
      console.log('Tabela CURRICULO criada com sucesso.');
    } else {
      console.log('Tabela CURRICULO já existe.');
    }
  } catch (err) {
    console.error('Erro ao verificar ou criar a tabela:', err);
  } finally {
    if (connection) {
      await connection.close();
    }
  }
};

const getAllCurriculos = async () => {
  let connection;
  try {
      connection = await oracledb.getConnection();
      const result = await connection.execute(
          `SELECT C.NOME, TO_CHAR(C.DATA_NASCIMENTO, 'DD/MM/YYYY') AS DATA_NASCIMENTO, C.TELEFONE, CU.CURRICULO_ID, CU.CIDADE, CU.ESTADO, CU.AREA 
           FROM CURRICULO CU
           JOIN CANDIDATO C ON CU.CANDIDATO_FK = C.CPF`,
          [],
          { outFormat: oracledb.OUT_FORMAT_OBJECT }
      );
      return result.rows;
  } catch (err) {
      console.error('Erro ao buscar currículos:', err);
      throw err;
  } finally {
      if (connection) {
          await connection.close();
      }
  }
};

const montarCurriculo = async (candidatoId, cidade, estado, area, nomeEmpresa, cargo, dataEntrada, dataSaida, universidade, cursoGraduacao, dataInicio, dataTermino, idioma) => {

  let connection;

  try {
    connection = await oracledb.getConnection();
    console.log('Valores de ligação:', {
      candidatoId, cidade, estado, area, idioma,
    });
    const result = await connection.execute(
      `INSERT INTO CURRICULO (CANDIDATO_FK, CIDADE, ESTADO, AREA, IDIOMA)
       VALUES (:candidatoId, :cidade, :estado, :area, :idioma) RETURNING CURRICULO_ID INTO :curriculoId`,
      {
        candidatoId: {val: candidatoId, type: oracledb.STRING },
        cidade: {val: cidade, type: oracledb.STRING },
        estado: { val: estado, type: oracledb.STRING },
        area: { val: area, type: oracledb.STRING },
        idioma: { val: idioma, type: oracledb.STRING },
        curriculoId: { type: oracledb.NUMBER, dir: oracledb.BIND_OUT }
      },
      { autoCommit: false }
    );

    const curriculoId = result.outBinds.curriculoId[0];
    
    await connection.execute(
      `INSERT INTO EXPERIENCIA (CURRICULO_FK, NOME_EMPRESA, CARGO, DATA_ENTRADA, DATA_SAIDA)
      VALUES (:curriculoId, :nomeEmpresa, :cargo, TO_DATE(:dataEntrada, 'YYYY-MM-DD'), TO_DATE(:dataSaida, 'YYYY-MM-DD'))`,
      {
        curriculoId: { val: curriculoId, type: oracledb.NUMBER },
        nomeEmpresa: { val: nomeEmpresa, type: oracledb.STRING },
        cargo: { val: cargo, type: oracledb.STRING },
        dataEntrada: { val: dataEntrada, type: oracledb.STRING },
        dataSaida: { val: dataSaida || null, type: oracledb.STRING }
      },
      { autoCommit: false }
    );
    
    await connection.execute(
      `INSERT INTO FORMACAO (CURRICULO_FK, UNIVERSIDADE, CURSO_GRADUACAO, DATA_INICIO, DATA_TERMINO)
      VALUES (:curriculoId, :universidade, :curso, TO_DATE(:dataInicio, 'YYYY-MM-DD'), TO_DATE(:dataTermino, 'YYYY-MM-DD'))`,
      {
        curriculoId: { val: curriculoId, type: oracledb.NUMBER },
        universidade: { val: universidade, type: oracledb.STRING },
        curso: { val: cursoGraduacao, type: oracledb.STRING },
        dataInicio: { val: dataInicio, type: oracledb.STRING },
        dataTermino: { val: dataTermino, type: oracledb.STRING }
      },
      { autoCommit: false }
    );
    await connection.commit();

  } catch (err) {
    console.error('Erro ao montar currículo:', err);
    if (connection) {
      try {
        await connection.rollback();
      } catch (rollbackErr) {
        console.error('Erro ao fazer rollback:', rollbackErr);
      }
    }
    throw err;
  } finally {
    if (connection) {
      try {
        await connection.close();
      } catch (closeErr) {
        console.error('Erro ao fechar a conexão:', closeErr);
      }
    }
  }
};

export const getCurriculoByCandidatoId = async (candidatoId) => {
  let connection;

  try {
    connection = await oracledb.getConnection();
    const result = await connection.execute(
      `SELECT * FROM CURRICULO WHERE CANDIDATO_FK = :candidatoId`,
      [candidatoId],
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );

    return result.rows[0];
  } catch (err) {
    console.error('Erro ao buscar currículo:', err);
    throw err;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
};

export const getExperienciasByCurriculoId = async (curriculoId) => {
  let connection;

  try {
    connection = await oracledb.getConnection();
    const result = await connection.execute(
      `SELECT TO_CHAR(DATA_ENTRADA, 'DD/MM/YYYY') AS DATA_ENTRADA, TO_CHAR(DATA_SAIDA, 'DD/MM/YYYY') AS DATA_SAIDA, NOME_EMPRESA, CARGO FROM EXPERIENCIA WHERE CURRICULO_FK = :curriculoId`,
      [curriculoId],
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );

    return result.rows[0];
  } catch (err) {
    console.error('Erro ao buscar experiências:', err);
    throw err;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
};

export const getFormacoesByCurriculoId = async (curriculoId) => {
  let connection;

  console.log(curriculoId);
  try {
    connection = await oracledb.getConnection();
    const result = await connection.execute(
      `SELECT UNIVERSIDADE, CURSO_GRADUACAO, TO_CHAR(DATA_INICIO, 'DD/MM/YYYY') AS DATA_INICIO, TO_CHAR(DATA_TERMINO, 'DD/MM/YYYY') AS DATA_TERMINO FROM FORMACAO WHERE CURRICULO_FK = :curriculoId`,
      [curriculoId],
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );

    return result.rows[0];
  } catch (err) {
    console.error('Erro ao buscar formações:', err);
    throw err;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
};

export const getCandidatoById = async (candidatoId) => {
  let connection;

  console.log(candidatoId);
  try {
    connection = await oracledb.getConnection();
    const result = await connection.execute(
      `SELECT NOME, CPF, TO_CHAR(DATA_NASCIMENTO, 'DD/MM/YYYY') AS DATA_NASCIMENTO, GENERO, TELEFONE, EMAIL  FROM CANDIDATO WHERE CPF = :candidatoId`,
      [candidatoId],
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );

    return result.rows[0];
  } catch (err) {
    console.error('Erro ao buscar candidato:', err);
    throw err;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
};

const getCurriculoById = async (curriculoId) => {
  let connection;
  try {
      connection = await oracledb.getConnection();
      const result = await connection.execute(
          `SELECT CIDADE, ESTADO, AREA, IDIOMA 
           FROM CURRICULO
           WHERE CURRICULO_ID = :curriculoId`,
          [curriculoId],
          { outFormat: oracledb.OUT_FORMAT_OBJECT }
      );
      return result.rows[0];
  } catch (err) {
      console.error('Erro ao buscar currículo:', err);
      throw err;
  } finally {
      if (connection) {
          await connection.close();
      }
  }
};

const getCandidatoByCurriculoId = async (curriculoId) => {
  let connection;
  try {
      connection = await oracledb.getConnection();
      const result = await connection.execute(
          `SELECT C.NOME, C.EMAIL, C.TELEFONE, TO_CHAR(C.DATA_NASCIMENTO, 'DD/MM/YYYY') AS DATA_NASCIMENTO, C.GENERO
           FROM CANDIDATO C
           JOIN CURRICULO CU ON CU.CANDIDATO_FK = C.CPF
           WHERE CU.CURRICULO_ID = :curriculoId`,
          [curriculoId],
          { outFormat: oracledb.OUT_FORMAT_OBJECT }
      );
      return result.rows[0];
  } catch (err) {
      console.error('Erro ao buscar candidato:', err);
      throw err;
  } finally {
      if (connection) {
          await connection.close();
      }
  }
};

const atualizarCandidato = async (candidatoId, { telefone }) => {
  let connection;
  try {
    connection = await oracledb.getConnection();

    const result = await connection.execute(
      `UPDATE CANDIDATO
       SET TELEFONE = :telefone
       WHERE CPF = :candidatoId`,
      {
        telefone,
        candidatoId
      },
      { autoCommit: true }
    );

    if (result.rowsAffected === 0) {
      throw new Error("Candidato não encontrado ou telefone já atualizado");
    }

    const candidatoAtualizado = await connection.execute(
      `SELECT CPF, NOME, TELEFONE, GENERO, TO_CHAR(DATA_NASCIMENTO, 'DD/MM/YYYY') AS DATA_NASCIMENTO, EMAIL 
       FROM CANDIDATO 
       WHERE CPF = :candidatoId`,
      {
        candidatoId
      },
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );

    return candidatoAtualizado.rows[0];
  } catch (error) {
    throw new Error(`Erro ao atualizar candidato: ${error.message}`);
  } finally {
    if (connection) {
      await connection.close();
    }
  }
};

const atualizarExperiencia = async (id, { nomeEmpresa, cargo, dataEntrada, dataSaida }) => {
  let connection;
  try {
    connection = await oracledb.getConnection();

    const result = await connection.execute(
      `UPDATE EXPERIENCIA
       SET NOME_EMPRESA = :nomeEmpresa, CARGO = :cargo, DATA_ENTRADA = TO_DATE(:dataEntrada, 'YYYY-MM-DD'), DATA_SAIDA = TO_DATE(:dataSaida, 'YYYY-MM-DD')
       WHERE CURRICULO_FK = :id`,
      {
        nomeEmpresa,
        cargo,
        dataEntrada,
        dataSaida,
        id
      },
      { autoCommit: true }
    );


    const experienciaAtualizada = await connection.execute(
      `SELECT NOME_EMPRESA, CARGO, TO_CHAR(DATA_ENTRADA, 'DD/MM/YYYY') AS DATA_ENTRADA, TO_CHAR(DATA_SAIDA, 'DD/MM/YYYY') AS DATA_SAIDA 
       FROM EXPERIENCIA 
       WHERE CURRICULO_FK = :id`,
      { id },
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );

    return experienciaAtualizada.rows[0];
  } catch (error) {
    throw new Error(`Erro ao atualizar experiência: ${error.message}`);
  } finally {
    if (connection) {
      await connection.close();
    }
  }
};

const atualizarFormacao = async (id, { universidade, curso, dataInicio, dataTermino }) => {
  let connection;
  console.log(id);
  try {
    connection = await oracledb.getConnection();

    const result = await connection.execute(
      `UPDATE FORMACAO
       SET UNIVERSIDADE = :universidade, CURSO_GRADUACAO = :curso, DATA_INICIO = TO_DATE(:dataInicio, 'YYYY-MM-DD'), DATA_TERMINO = TO_DATE(:dataTermino, 'YYYY-MM-DD')
       WHERE CURRICULO_FK = :id`,
      {
        universidade,
        curso,
        dataInicio,
        dataTermino,
        id
      },
      { autoCommit: true }
    );


    const formacaoAtualizada = await connection.execute(
      `SELECT UNIVERSIDADE, CURSO_GRADUACAO, TO_CHAR(DATA_INICIO,'DD/MM/YYYY') AS DATA_INICIO, TO_CHAR(DATA_TERMINO, 'DD/MM/YYYY') AS DATA_TERMINO 
       FROM FORMACAO 
       WHERE CURRICULO_FK = :id`,
      { id },
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );

    return formacaoAtualizada.rows[0];
  } catch (error) {
    throw new Error(`Erro ao atualizar formação: ${error.message}`);
  } finally {
    if (connection) {
      await connection.close();
    }
  }
};

const atualizarCurriculo = async (candidatoId, { cidade, estado, area, idioma }) => {
  let connection;
  try {
    connection = await oracledb.getConnection();

    const result = await connection.execute(
      `UPDATE CURRICULO 
       SET CIDADE = :cidade, ESTADO = :estado, AREA = :area, IDIOMA = :idioma
       WHERE CANDIDATO_FK = :candidatoId`,
      {
        cidade,
        estado,
        area,
        idioma,
        candidatoId
      },
      { autoCommit: true }
    );

    if (result.rowsAffected === 0) {
      throw new Error("Currículo não encontrado ou dados já atualizados.");
    }

    const curriculoAtualizado = await connection.execute(
      `SELECT CURRICULO_ID, CIDADE, ESTADO, AREA, IDIOMA 
       FROM CURRICULO 
       WHERE CANDIDATO_FK = :candidatoId`,
      { candidatoId },
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );

    return curriculoAtualizado.rows[0];
  } catch (error) {
    throw new Error(`Erro ao atualizar currículo: ${error.message}`);
  } finally {
    if (connection) {
      await connection.close();
    }
  }
};

const curriculoModel = {
  createCurriculoTable,
  getAllCurriculos,
  montarCurriculo, 
  getCurriculoByCandidatoId,
  getExperienciasByCurriculoId,
  getFormacoesByCurriculoId,
  getCandidatoById,
  getCurriculoById,
  getCandidatoByCurriculoId,
  atualizarCandidato,
  atualizarCurriculo,
  atualizarExperiencia,
  atualizarFormacao,
};

export default curriculoModel;